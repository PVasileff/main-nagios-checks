#!/bin/bash
#
# Plamen Vasilev a.k.a Paco - p.vasileff@gmail.com - 16 Jan 2020
# Based on check_mikrorik_mem from Jakub Zemanek - zemanekj@vspj.cz
# Based on check_mt_volt from Michal Lasisz <michal.lasisz@gmail.com>

PROGNAME=`basename $0`
PROGPATH=`dirname $0`
REVISION=`echo '$Revision: 2.0 $' | sed -e 's/[^0-9.]//g'`

# Exit codes
#STATE_OK=0
#STATE_WARNING=1
#STATE_CRITICAL=2
#STATE_UNKNOWN=3

. $PROGPATH/utils.sh

print_usage() {
    echo -e "Usage: $PROGNAME -H <ip_address> [-w <number>] [-c <number>] [-C <community>]
[-P <snmp version>] [-U <username>] [-L <secLevel>] [-a <authproto>]
[-x <privproto>] [-A <authpassword>] [-X <privpassword>]"
    echo -e "\nOptions:"
    echo -e " -V, --version\n    Print version information"
    echo -e " -h, --help\n    Print detailed help screen"
    echo -e " -H, --hostname=ADDRESS\n    Host name or IP address"
    echo -e " -w, --warning=INTEGER\n    Warning treshold 0-100 (default 30)"
    echo -e " -c, --critical=INTEGER\n    Critical treshold 0-100 (default 20)"
    echo -e " -C, --community=STRING\n    Optional community string for SNMP communication (default is public)"
    echo -e " -P, --protocol=[1|2c|3]\n    SNMP protocol version(default is 2c)"
    echo -e " -L, --seclevel=[noAuthNoPriv|authNoPriv|authPriv]\n    SNMPv3 securityLevel"
    echo -e " -a, --authproto=[MD5|SHA]\n    SNMPv3 auth proto"
    echo -e " -x, --privproto=[DES|AES]\n    SNMPv3 priv proto"
    echo -e " -U, --secname=USERNAME\n    SNMPv3 username"
    echo -e " -A, --authpassword=PASSWORD\n    SNMPv3 authentication password"
    echo -e " -X, --privpassword=PASSWORD\n    SNMPv3 privacy password"

echo "
This plugin uses the 'snmpget' command included with the NET-SNMP package.
if you don't have the package installed, you will need to download it from
http://net-snmp.sourceforge.net before you can use this plugin."
}

print_help() {
    print_revision $PROGNAME $REVISION
    echo ""
    echo "This plugin checks mirktoik voltage in Volts and operates with percentage deviation of normal voltage."
    echo "Plugin using percentage because some of the routers reported different voltage reading even devices are wired to the same Power Supply (sometimes the difference was 10 V)."
    echo "Plugin write data to /tmp folder."
    echo ""
    print_usage
    echo ""
    support
}

clean_ref_voltages() {
    echo ""
    echo "Cleaning reference files from /tmp"
    echo ""
    rm -f /tmp/mikrotik-reference-voltage-for-host-**
    echo "Done"
}

#Set default values
critical=30
warning=20
community=""
protocol=""
secname=""
authproto=""
privproto=""
privpasswd=""
authpassword=""

#Process parameters
while test -n "$1"; do
	case "$1" in
			--help)
			    print_help
			    exit $STATE_OK
			    ;;
			-h)
			    print_help
			    exit $STATE_OK
			    ;;
			--clean)
			   clean_ref_voltages
			   exit $STATE_OK
			   ;;
			--version)
			    print_revision $PROGNAME $REVISION
			    exit $STATE_OK
			    ;;
			-V)
			    print_revision $PROGNAME $REVISION
			    exit $STATE_OK
			    ;;
			-w)
			    warning=$2
			    shift
			    ;;
			--warning*)
			    warning=" $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-c)
			    critical=$2
			    shift
			    ;;
			--critical*)
			    critical=" $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-H)
			    Host="$2"
			    shift
			    ;;
			--hostname*)
			    Host=" $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-C)
			    community=" -c $2"
			    shift
			    ;;
			--community*)
			    community=" -c $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-P)
			    protocol=" -v $2"
			    shift
			    ;;
			--protocol*)
			    protocol=" -v $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-U)
			    secname=" -u $2"
			    shift
			    ;;
			--secname*)
			    secname=" -u $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-a)
			    authproto=" -a $2"
			    shift
			    ;;
			--authproto*)
			    authproto=" -a $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-x)
			    privproto=" -x $2"
			    shift
			    ;;
			--privproto*)
			    privproto=" -x $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-A)
			    authpassword=" -A $2"
			    shift
			    ;;
			--authpassword*)
			    authpassword=" -A $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-X)
			    privpasswd=" -X $2"
			    shift
			    ;;
			--privpassword*)
			    privpasswd=" -X $(echo $1 | cut -d "=" -f 2)"
			    ;;
			-L)
			    seclevel=" -l $2"
			    shift
			    ;;
			--seclevel*)
			    seclevel=" -l $(echo $1 | cut -d "=" -f 2)"
			    ;;

			*)
			    echo "Unknown argument: $1"
			    echo "Usage: $PROGNAME --help"
			    exit $STATE_UNKNOWN
			    ;;
	esac
	shift
done

#Host is not optional
if [ "$Host" == "" ]; then
    exit $STATE_UNKNOWN
fi

#Set default values
if [ "$protocol" == "" ]; then
    protocol=" -v 2c"
    community=" -c public"
fi

voltage=$(snmpget $community$authproto$authpassword$privpasswd$protocol$secname$seclevel$privproto -OEqv $Host 1.3.6.1.4.1.14988.1.1.3.8.0)
if [ $? -ne "0" ] ; then
    exit $STATE_CRITICAL
fi

voltagevalue='^[0-9]+$'
if ! [[ $voltage =~ $voltagevalue ]] ; then
        echo "This MikroTik Router does not report voltage. You must disable check for this host."
	exit $STATE_CRITICAL
fi

#check if reference voltage is present if not create reference voltage file, if exists read
if [[ -f /tmp/mikrotik-reference-voltage-for-host-$Host ]]
then
    reference_voltage=$(cat /tmp/mikrotik-reference-voltage-for-host-$Host)
else
    echo "$voltage" > /tmp/mikrotik-reference-voltage-for-host-$Host
    reference_voltage=$voltage
fi

res=$(awk -v volt=$voltage -v ref_volt=$reference_voltage -v crit=$critical -v warn=$warning 'BEGIN {perc=(100-((volt/ref_volt)*100));if (perc < 0) perc=(perc * (-1));if (perc >crit) print "CRITICAL"; else if (perc > warn) print "WARNING"; else print "OK"; }')

## For debug purposes
#echo "Last voltage reading: $reference_voltage"
#echo "Current voltage reading: $voltage"

# Nagios Statements
# WARNING / CRITICAL / OK
if [[ $res == "CRITICAL" ]]
	then
	echo "CRITICAL: Voltage from last check: "$reference_voltage"V - Current voltage: "$voltage"V | voltage=$voltage;$voltage;$reference_voltage"
	exit $STATE_CRITICAL
fi

if [[ $res == "WARNING" ]]
	then
        echo "WARNING: Voltage from last check: "$reference_voltage"V - Current voltage: "$voltage"V | voltage=$voltage;$voltage;$reference_voltage"
	exit $STATE_WARNING
fi

if [[ $res == "OK" ]]
	then
        echo "OK: Voltage from last check: "$reference_voltage"V - Current voltage: "$voltage"V | voltage=$voltage;$voltage;$reference_voltage"
	exit $STATE_OK
fi
